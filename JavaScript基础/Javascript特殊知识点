Javascript特殊知识点

1.==与===
=== 是恒等
	1.如果类型不同，则false
	2.如果类型相同，且值相同则等于

== 是等于
	1.如果类型相同，跟===一样
	2.如果类型不同，则会做类型转换后再比较
		a. null == undefined true
		b. 字符串与数值，会将字符串转换为数字后再比较
		c. boolean与其他的比较，true 转换为1，false转换为0，再比较
		d. 对象与数值或字符串比较，先讲对象转换为基础类型（toString，或者valueOf），再与另一个值比较


2.函数定义方式

函数定义的方式有多种

	a.函数声明
	b.函数表达式
	c.另外一种方式

函数声明与函数表达式的区分
	函数声明在作用域内会被提前声明
	部分调试器的栈中函数表达式不会显示函数名称，函数声明会显示（chrome的调试器都会显示）
	如果不声明函数名称，则一定是表达式
	如果声明了函数名称，不一定是函数声明,具体区分方法如下：（主要通过上下文）
		a.如果是赋值表达式的一部分，则是函数表达式 //var bar = function foo(){}
		b.如果使用new ，则是表达式 //new function bar(){}
		c.如果在（）内部，则是表达式 //(function foo(){})

根据上面的区分，有一种特殊的类型，命名函数表达式，安装规范这个函数的名字只能在这个函数的内部有效，
	
	var f = function foo(){
	    return typeof foo; // foo是在内部作用域内有效
	  };
	  // foo在外部用于是不可见的
	  typeof foo; // "undefined"
	  f(); // "function"

IE中的BUG（ie9以下）
ie中对命名函数表达式，在函数的外部也可以使用这个函数的命名，
而且这个函数的名字 跟表达式获取的函数 是不同的函数对象。

	
	var f = function g(){};
    f === g; // false

这样就会导致一个内存的问题，因为g永远不会被释放，所以需要显示的释放g

	var f = function g(){};
    g = null;


#函数声明的声明时间点:函数声明会在当前作用域最先被声明，并且声明为局部变量。#

    (function(){

        var g = null;
        var a =function g(){//这里要注意不能混淆，首先这个不是函数声明（命名函数表达式的名称并不会提前声明），其次，g只能在函数内部使用
            alert('1');
        }
        a();
        g();//报错，
    })()

    (function(){
        var g = null;
        function g(){
            alert('1');
        }
        g();//报错，因为g在var g之前提前声明为局部变量，那么再声明 var g =null;则覆盖了
    })()

    <script>
    (function(){
        g = 'test';
        function g(){
            alert('1');
        }
        console.log(g);//test
        console.log(window.g);//undefined，因为声明函数被提前声明，且声明为局部变量
    })()
</script>


SpiderMonkey的怪癖
对于命名表达式内部的作用域会有一个特殊的对象，作用域链中，foo的局部环境的下一个对象 就是{foo:<function object>};
当然高版本的浏览器已经解决这个问题（“特殊”对象不再继承Object.prototype了）
	Object.prototype.x = 'outer';
  

	  (function(){
	    
	    var x = 'inner';
	    
	    /*
	      函数foo的作用域链中有一个特殊的对象——用于保存函数的标识符。这个特殊的对象实际上就是{ foo: <function object> }。
	      当通过作用域链解析x时，首先解析的是foo的局部环境。如果没有找到x，则继续搜索作用域链中的下一个对象。下一个对象
	      就是保存函数标识符的那个对象——{ foo: <function object> }，由于该对象继承自Object.prototype，所以在此可以找到x。
	      而这个x的值也就是Object.prototype.x的值（outer）。结果，外部函数的作用域（包含x = 'inner'的作用域）就不会被解析了。
	    */
	    
	    (function foo(){
	      
	      alert(x); // 提示框中显示：outer
	    
	    })();
	  })();

3.var 的预解析（hoisting）

在同一个作用域中，不管var处于什么位置，var都会被提前声明，但是var的赋值是在代码中的位置进行的,
但是有一点一个变量在执行域里面，只会被声明一次,如果进行第二次第二次声明，则声明无效，但是如果声明的同时复制（var a =1；），则赋值还是会进行

	myname = "global"; // 全局变量
	function func() {
	    alert(myname); // "undefined"，之所以这样，是因为 myname会被提前声明，但是myname的赋值并没有提前执行，所以是undefined
	    var myname = "local";
	    alert(myname); // "local"
	}
	func();

	//上面这段代码等同与下面的代码，
	myname = "global"; // global variable
	function func() {
	   var myname; // 等同于 -> var myname = undefined;
	   alert(myname); // "undefined"
	   myname = "local";
	   alert(myname); // "local"}
	func();

	(function(){
        var g;//到这一步g已经被声明并且定义为函数了，所以这个声明无效
        function g(){
            alert('alert');
        }
       g();//正常，g还是函数
    })()

    (function(){
        
        function g(){
            alert('alert');
        }
        var g;
       	g();//正常
    })()

    (function(){
        
        function g(){
            alert('alert');
        }
        g();//正常
        var g=1;//因为 声明函数的g已经提前声明了，所以这个g并不会声明，但是执行到这一步g会被赋值为1
       	g();//报错，
    })()

	也证因为这样，大部分代码规范都推荐把变量的声明 放在代码的开始处，以避免这种混乱

	javascript中，有一个name resolution order规则，
		语言内置，所有的作用域中都有this和arguments关键字
		形式参数，函数的参数在整个作用域中都是有效的
		函数声明
		变量声明
	个人理解，这个是声明的顺序，但是一个变量被声明后，就不会被再次被声明所覆盖，也就是说再次声明会被忽略，但是可以被再次赋值。


4.call 的第一个参数
	如果第一个参数传入的对象调用者是null或者undefined的话，call方法将把全局对象（也就是window）作为this的值。

	function a() {
	    alert(this);
	}
	a.call(window);//

5.变量对象

	变量对象是一个与执行上下文相关的特殊对象，它存储着上下文中声明的：变量（var，变量声明）,函数声明,函数的形参。

	全局对象的变量对象就是全局对象本身，全局对象只存在一份。

	函数上下文中的变量对象,
	函数上下文的变量对象包含一个特殊的属性，arguments;

		VO = {
			arguments：<ARG>
			...
		}

	arguments对象有如下属性：
		callee - 指向当前函数额引用
		length - 真正传递的参数个数
		properties-indexs， 这里有个要注意的，properties-indexes与实际传递进来的参数之间是共享的(可以理解为指向同一个内存地址，那么如果argments上改变了的化，参数列表中的对应项也改变)
		但是这个共享仅限传入的参数个数之内。

		function foo(x, y, z) {
 
		  // 声明的函数参数数量arguments (x, y, z)
		  alert(foo.length); // 3
		 
		  // 真正传进来的参数个数(only x, y)
		  alert(arguments.length); // 2
		 
		  // 参数的callee是函数自身
		  alert(arguments.callee === foo); // true
		 
		  // 参数共享
		 
		  alert(x === arguments[0]); // true
		  alert(x); // 10
		 
		  arguments[0] = 20;//改变0位置上的参数，x也改变
		  alert(x); // 20
		 
		  x = 30;
		  alert(arguments[0]); // 30，改变X，那么0位置上的参数也改变
		 
		  // 不过，没有传进来的参数z，和参数的第3个索引值是不共享的
		  z = 40;
		  alert(arguments[2]); // undefined
		 
		  arguments[2] = 50;
		  alert(z); // 40
		 
		}
		 
		foo(10, undefined);


6.处理上下文代码
	执行上下文代码分成两个基本阶段来处理：
		1.进入执行上下文
		2.执行代码

	6.1进入执行上下文
		当进入执行上下文时，VO已经包含了变量对象，这个时候变量对象包含了所以的声明

		a:函数的所以形参，
			在变量对象中，会创建 形参名称对应的属性，并且会将形参的值设置到属性上
			function(a,b,c)()(1,2)
			VO ={a:1,b:2,c:undefined};
		b:函数声明
			在变量对象中，会创建函数声明名称对应的属性，其值对对应的函数对象。
			如果变量对象已经存在相同名称的属性，则完全替换这个属性，
			"也就是说函数声明可以覆盖形参中定义的对象，测试例子如下："
			--以上这句话可能不妥，现在看来，声明都不可以覆盖，之所以会有这个现象是因为赋值，函数的声音阶段也会赋值，所以将函数覆盖了形参的值

			(function (a, b, c) {

		        console.log(a);//输出的函数，则可以证明函数声明会覆盖形参的声明(这句话可能需要再考虑下，但是不管怎样，实现结果是清晰的)
		        //
		        console.log(arguments[0]);//这里也是函数，因为可以理解为上下文的变量都是存在变量对象上的，
		        //而arguments跟形参是共享，也就是说都是指向变量对象对应的a属性
		        function a() {
		            console.log('111');
		        }
		        a();
		    })(1,2,3);

		c:变量声明
			在变量对象中，会创建对应的属性，其值是undefined，如果变量对象中已经存在对应的属性，则不会覆盖

		总结:
			进入执行上下文之前，变量对象已经有过一个声明的阶段，这个声明按照如下顺序：形参，函数声明，变量声明。
			//函数声明会覆盖形参的声明，变量声明不会覆盖以上两者。
			形参以及函数声明会将变量的值也赋到对应的变量对象的属性上，而变量声明不会赋值，变量声明对应的属性都是undefined

		举例说明：

			function test(a, b) {
			  var c = 10;
			  function d() {}
			  var e = function _e() {};
			  (function x() {});//外面有括号，所以是函数表达式而不是函数声明
			}
			 
			test(10); // call

			当进入test执行上下文时：
				AO(test) = {
				  a: 10,
				  b: undefined,
				  c: undefined,
				  d: <reference to FunctionDeclaration "d">
				  e: undefined
				};
	6.2 执行代码
		在这个周期内，会修改变量对象上的部分值.

		这里要注意，为什么没有X，未保存的函数表达式只有在它自己的定义或递归中才能被调用

		AO(test) = {
				  a: 10,
				  b: undefined,
				  c: 10,
				  d: <reference to FunctionDeclaration "d">
				  e: <reference to FunctionExpression "_e">;//这里的_e不太理解，保存到内存中··但是IE8以下，又可以访问，其他的浏览器都只在这个函数内部才可以访问这个变量
				};

		关于呆if else的变量声明也是一样的道理

			if (true) {
			  var a = 1;
			} else {
			  var b = 2;
			}
			 
			alert(a); // 1
			alert(b); // undefined,b也声明了

7.var / 变量 / 属性

	首先，明确三个个概念：
		变量只能通过var来定义
		变量与属性的一个很大的区别：变量有一个特性(attribute)：{DontDelete}不能通过delete来删除，而属性可以delete来删除
		全局对象的变量对象就是全局对象本身。

	在js中未通过var定义的 都会被设置到 全局对象的属性上，注意这里是属性，而不是变量。

		var a =1;
		console.log(a);
		console.log(b);//这里会报错，因为下一句，b=1并不是变量，不是变量则不会提前声明，执行到这里的时候，会从全局对象中查找b
		//但是显然B 找不到，所以就报错
		b=1;

		var a =1;
		console.log(a);
		b=1;//在执行阶段，会将b设置为window的属性，至于如何将b设置为a的属性，这个就不得而知了
		console.log(b);//为什么这里又正常呢？我们注意全局对象的变量对象就是本身，那么到这一步会从当前的变量对象中查找，
		//也就是从window中查找，因为上一步将window设置为b的属性，故可以找到，所以就不会报错。
		
		我们也可以通过另外一种方式来确定B是变量还是属性。通过下面例子可以得出

		var a = 1;
		b = 1;
		console.log(delete window.a);// false;
		console.log(delete window.b);// true






	

