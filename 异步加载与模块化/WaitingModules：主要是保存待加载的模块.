WaitingModules：主要是保存待加载的模块.
	fn,waitMods,主要这两个属性，
	方法:add,remove,contains.
	notifyAll:运行
	
loader.js
use分析：

	1.初始化 WaitingModules.
		参数 fn 为函数loadReady
		
	2.初始化loader ==new SimpleLoader(S, waitingModules); 
			or new ComboLoader(S, waitingModules);
		
	3.sync根据参数 sync，决定同步还是异步加载
		同步跟异步的实现上的区别(是否使用setTimeout)
		
	4.调用waitingModules.notifyAll()，也就是执行loadReady函数
	
			loadReady:分析:
				4.1循环调用Utils.attachModsRecursively(normalizedModNames, S, undefined, errorList);
							---这个如果判断状态成功则，直接执行
					判断当前use的各个模块的状态
					如果都加载成功则，
						调用参数中的成功回掉函数
						success && success.apply(S, Utils.getModules(S, modNames));
					如果出错，则
						错误的回掉参数中的错误回掉函数error && error.apply(S, errorList);
					如果未加载，则使用loader.use加载模块
						waitingModules.fn = loadReady;
                    	loader.use(normalizedModNames);
                    	
                    	
                    	
SimpleLoader 分析:

	主要属性：runtime，requireLoadedMods，waitingModules。
	//waitingModules属性，在初始化的时候，有了，就是use中的那个waitingModules
	
	功能主线分析：
	1.user：方法：使命加载模块
		1.循环加载模块 this.loadModule(normalizedModNames[i]);
	
	1.1 loadModule 加载模块
		1：创建模块信息
				Utils.createModuleInfo(runtime, modName);
		2.如果已经ATTACHED或失败，则退出
		3.如果已经加载了，则加载依赖的模块
			self.loadModRequires(mod);
		4.如果没有加载，则判断是否待加载，
			如果待加载，则退出
			否则waitingModules.add(modName);，加载并attach模块，self.fetchModule(mod);
			mod中添加加载后的回掉函数。
				mod.addCallback(function () {
                   	//加载完成后，加载其依赖项
                    self.loadModRequires(mod);
                    //待加载项中删除当前模块
                    waitingModules.remove(modName);
                    // 通知当前loader的实例加载
                    waitingModules.notifyAll();
                });
                
    1.2 fetchModule:真正加载模块的方法
    	1.mod状态更改为LOADING：mod.status = LOADING;
    	2.S.getScript 复制讲模块中的文件加载到页面
    	3.期中的回掉函数:
    		success:加载成功后注册模块
    		Utils.registerModule(runtime,
                                modName, currentMod.fn,
                                currentMod.config);
                                
            完全加载成功后，在调用checkhandler的方法，判断是否成功，并输出成功信息。
            	mod.notifyAll();
            	
            	
	1.3 loadModRequires 加载依赖模块
			
			var self = this,
                requireLoadedMods = self.requireLoadedMods,
                modName = mod.name,
                requires;
            if (!requireLoadedMods[modName]) {//已经加载过的则不加载
                requireLoadedMods[modName] = 1;
                requires = mod.getNormalizedRequires();
                self.use(requires);
            }
            
            
            
            
            
1.4 分析:

	1.Kissy.use('test/index');
		a,分析test/index的依赖关系，Utils.attachModsRecursively 、、递归判断各个modsName是否已经加载进来
			attachModRecursively 递归attach模块，
				如果runtime.Env.mods[name] 不存在次model，则返回0，代表没加载
				如果mod ATTACHED，则返回1，
				如果mod加载了，则Utils.attachModsRecursively(m.getNormalizedRequires(),，判断他的依赖模块，是否attach，如果都attach了则，返回1
		b,分析得出，test/index 未加载,则loader.use(test/index);	
		
	2.comboloader.use(test/index)
            	
		load.calculate(test/index),计算test/index 的依赖
			如果模块在cache，则返回，如果不在，则创建模块，
			如果模块没有加载，modStatus != LOADED，
				则，如果!waitingModules.contains(m)，那么设置mod.status = LOADING;
				mode.wait(function(){waitingModules.remove(mod.getName());,waitingModules.notifyAll();})
				waitingModules.add(mod);
			计算mod依赖模块的 依赖关系self.calculate(mod.getNormalizedRequires(), cache, ret);
			
		getComboUrls(test/index)
			this.getComboMods(modNames, comboPrefixes);
			comboMods-(js,csss)-mods-[mod(name,package..),mod],
			生成url之后，返回comboUrls
			
		遍历comboUrls[js,css],加载jsOne，test模块对应的url对象，
			加载成功的回调函数,循环url对象的mods，调用每个模块的 mod.notifyAll();
				mod.notifyAll();,也就是上面 calculate，中放入的waitingModules，
				这一部的意思呢，就是说，当这个模块加载成功后，执行加载成功的回调函数。。loadReady（）函数，
				
				
	
	3.加载成功，执行回调
		loadReady();
		再次分析loadReady的依赖关系:
		
		
		
二。自动化工具分析:
	1.dubug模式下：
			jshint,copy,lessc,tpl2mod
			
	2.发布模式下:
			jshint,copy,lessc,tpl2mod,
			合并本模块的JS,combo-file
			压缩CSS,compress-css
			开启本模块的动态JS，module-combine-enable
			抽取全局JS依赖关系以及补全
					
			
			
			


					





		
	
	